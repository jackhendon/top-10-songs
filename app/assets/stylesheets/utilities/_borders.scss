@use "../variables" as *;
@use "../mixins" as *;

// BORDERS
// Utility classes for border and border colours

$border-widths: (
  0: 0,
  1: 1px,
  2: 2px,
  4: 4px,
  8: 8px,
  "0-5": 0.5px
);

@each $step, $value in $border-widths {
  @if $step == 1 {
    .border { border-width: 1px }
    .border-t { border-top-width: 1px; }
    .border-r { border-right-width: 1px; }
    .border-b { border-bottom-width: 1px; }
    .border-l { border-left-width: 1px; }
  }

  @else {
    .border-#{$step} { border-width: $value }
    .border-t-#{$step} { border-top-width: $value }
    .border-r-#{$step} { border-right-width: $value }
    .border-b-#{$step} { border-bottom-width: $value }
    .border-l-#{$step} { border-left-width: $value }
  }
}

.border-dashed { border-style: dashed; }
.inset-border-ink { box-shadow: inset 0 0 0 1px var(--ink); }

@include generate-breakpoint-prefixes {
  @each $step, $value in $border-widths {
    @if $step == 1 {
      &border { border-width: 1px; }
      &border-t { border-top-width: 1px; }
      &border-r { border-right-width: 1px; }
      &border-b { border-bottom-width: 1px; }
      &border-l { border-left-width: 1px; }
    }

    @else {
      &border-#{$step} { border-width: $value }
      &border-t-#{$step} { border-top-width: $value }
      &border-r-#{$step} { border-right-width: $value }
      &border-b-#{$step} { border-bottom-width: $value }
      &border-l-#{$step} { border-left-width: $value }
    }
  }
}

// Generate border colour utility classes
@each $colour-name, $colour in $colours {
  .border-#{$colour-name} {
    border-color: #{$colour};
  }
}

@include generate-breakpoint-prefixes {
  @each $colour-name, $colour in $colours {
  &border-#{$colour-name} {
      border-color: #{$colour};
    }
  }
}

// Generate border color utility classes
@each $colour-name, $colour in $colours {
  $hover-prefix: "hover\\:border-#{$colour-name}";

  .#{$hover-prefix} {
    &:hover {
      border-color: #{$colour};
    }
  }
}
