@use "../variables" as *;

// Scaffolding
// --------------------------------------------------

// Reset the box-sizing
* {
  box-sizing: border-box;
}

*:before,
*:after {
  box-sizing: border-box;
}

/* Opt-in the whole page to interpolate sizes to/from keywords */
:root {
  interpolate-size: allow-keywords;
}

// Body reset
html {
  font-size: 100%;
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
  -webkit-font-smoothing: antialiased;
  scroll-padding-top: 50px;

  @media (min-width: $screen-md-min) {
    scroll-padding-top: 104px;
  }
}

body {
  // font-family, font-size and line-height match typeset-7
  font-family: $font-family-sans-serif;
  font-size: 14px;
  line-height: 1.3;
  color: var(--ink);
  background-color: var(--paper-2);
}

h1,
h2,
h3,
h4,
h5,
h6 {
  color: inherit;
  font-size: inherit;
  font-weight: inherit;
  line-height: inherit;
  margin: 0;
}

// Reset fonts for relevant elements
input,
button,
select,
textarea {
  color: inherit;
  font-family: inherit;
  font-size: inherit;
  line-height: inherit;
}

button,
select {
  &:focus {
    outline: 1px solid currentColor;
    outline-offset: 2px;
  }

  // Think of :focus-visible as "focus with the keyboard"
  // When the link is focused, but not by using the keyboard
  // i.e you clicked on it, we want to undo what we did above
  &:focus:not(:focus-visible) {
    outline: none;
  }

  &:focus-visible {
    outline: 1px solid currentColor;
    outline-offset: 2px;
  }
}

// Links
a {
  color: inherit;
  text-decoration: none;

  &:focus {
    outline: 1px solid currentColor;
    outline-offset: 2px;
  }

  // Think of :focus-visible as "focus with the keyboard"
  // When the link is focused, but not by using the keyboard
  // i.e you clicked on it, we want to undo what we did above
  &:focus:not(:focus-visible) {
    outline: none;
  }

  &:focus-visible {
    outline: 1px solid currentColor;
    outline-offset: 2px;
  }

  @media (hover: hover) {
    color: inherit;
  }
}

// Images
img {
  vertical-align: middle;
}

// Responsive images (ensure images don't scale beyond their parents)
.img-responsive {
  display: block;
  max-width: 100%; // Part 1: Set a maximum relative to the parent
  height: auto; // Part 2: Scale the height according to the width, otherwise you get stretching
}

// Only display content to screen readers
// See: http://a11yproject.com/posts/how-to-hide-content
.sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  margin: -1px;
  padding: 0;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  border: 0;
}

// Use in conjunction with .sr-only to only display content when it's focused.
// Useful for "Skip to main content" links; see http://www.w3.org/TR/2013/NOTE-WCAG20-TECHS-20130905/G1
// Credit: HTML5 Boilerplate
.sr-only-focusable {
  &:active,
  &:focus {
    position: static;
    width: auto;
    height: auto;
    margin: 0;
    overflow: visible;
    clip: auto;
  }
}

// iOS "clickable elements" fix for role="button"
// Fixes "clickability" issue (and more generally, the firing of events such as focus as well)
// for traditionally non-focusable elements with role="button"
// see https://developer.mozilla.org/en-US/docs/Web/Events/click#Safari_Mobile
[role="button"] {
  cursor: pointer;
}

// Container widths
// Set the container width for each breakpoint.
.container {
  margin-left: auto;
  margin-right: auto;
  padding-left: 1rem;
  padding-right: 1rem;

  @media (min-width: $screen-sm-min) {
    width: $container-sm;
  }
  @media (min-width: $screen-md-min) {
    width: $container-md;
  }
  @media (min-width: $screen-lg-min) {
    width: $container-lg;
  }
}

.md\:container {
  @media (min-width: $screen-md-min) {
    margin-left: auto;
    margin-right: auto;
    padding-left: 1rem;
    padding-right: 1rem;
    width: $container-md;
  }
  @media (min-width: $screen-lg-min) {
    width: $container-lg;
  }
}

.lg\:container {
  @media (min-width: $screen-lg-min) {
    margin-left: auto;
    margin-right: auto;
    padding-left: 1rem;
    padding-right: 1rem;
    width: $container-lg;
  }
}
